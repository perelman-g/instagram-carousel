'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _React = require('react');

var _React2 = _interopRequireWildcard(_React);

var _ContextTypes = require('./ContextTypes');

var _ContextTypes2 = _interopRequireWildcard(_ContextTypes);

var _ShouldUpdate = require('./ShouldUpdate');

var _ShouldUpdate2 = _interopRequireWildcard(_ShouldUpdate);

var _AutoBind = require('./AutoBind');

var _AutoBind2 = _interopRequireWildcard(_AutoBind);

var _setupGetters = require('./setupGetters');

var _setupGetters2 = _interopRequireWildcard(_setupGetters);

var Base = _React2['default'].Component;
Base.shouldComponentUpdate = _ShouldUpdate2['default'].shouldComponentUpdate;
Base.contextTypes = _ContextTypes2['default'];
Object.assign(Base.prototype, _AutoBind2['default']);

var Component = (function (_Base) {
  function Component(props) {
    var shouldAutoBind = arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, Component);

    _get(Object.getPrototypeOf(Component.prototype), 'constructor', this).call(this, props);
    _setupGetters2['default'].call(this);
    if (shouldAutoBind) this.autoBind();
  }

  _inherits(Component, _Base);

  return Component;
})(Base);

module.exports = Component;
'use strict';

var React = require('react');
var RoutedViewListMixin = require('reapp-routes/react-router/RoutedViewListMixin');
var Components = require('reapp-ui/all');
var store = require('./store');
var theme = require('./theme');
var action = require('./action');
var ContextTypes = require('./ContextTypes');

module.exports = function (opts, Component) {
  if (!Component) {
    Component = opts;
    opts = null;
  }

  opts = opts || {
    routed: true
  };

  return React.createClass(Object.assign({}, { childContextTypes: ContextTypes }, {
    mixins: [].concat(opts.routed ? RoutedViewListMixin : []),

    getChildContext: function getChildContext() {
      return {
        theme: theme(),
        store: store.cursor(),
        action: action
      };
    },

    componentWillMount: function componentWillMount() {
      var _this = this;

      this.forceUpdater = function () {
        return _this.forceUpdate();
      };
      store.cursor() && store.cursor().listen(this.forceUpdater);
    },

    componentWillUnmount: function componentWillUnmount() {
      store.cursor() && store.cursor().unlisten(this.forceUpdater);
    },

    render: function render() {
      var children = this.props.children;
      var Theme = this.props.theme;
      var viewList = React.createElement(
        Components.ViewList,
        this.props.viewListProps,
        children
      );

      var themedChildren = Theme ? React.createElement(
        Theme,
        null,
        viewList
      ) : viewList;
      var props = opts.routed ? {
        child: this.hasChildRoute() && this.createChildRouteHandler || noop,
        viewListProps: this.routedViewListProps()
      } : {};

      return React.createElement(Component, props);
    }
  }));
};

function noop() {
  return null;
}
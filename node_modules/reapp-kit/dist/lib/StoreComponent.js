'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (descriptor.value) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _React = require('react');

var _React2 = _interopRequireWildcard(_React);

/*

  Pass Store properties to children declatatively.
  fetch : (array|object)

    <Store fetch={['prop', 'otherProp']}>
      <Child />
    </Store>

    <Store fetch={{ prop: ['item', 'id'] }} />

 Uses the store in this.context.store

 Given a fetch property
   1. grabs fetch values from store
   2. passes values as props to its children

*/

var StoreComponent = (function (_React$Component) {
  function StoreComponent() {
    _classCallCheck(this, StoreComponent);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(StoreComponent, _React$Component);

  _createClass(StoreComponent, [{
    key: 'render',
    value: function render() {
      var children = _React2['default'].Children.only(this.props.children);

      if (!children) {
        return;
      }if (!this.context.store) {
        return children;
      }var store = this.context.store();
      var _props = this.props;
      var fetch = _props.fetch;

      var props = _objectWithoutProperties(_props, ['fetch']);

      var storeProps = {};

      // support array or object syntax
      if (Array.isArray(fetch)) fetch.forEach(function (key) {
        storeProps[key] = store.get(key);
      });else Object.keys(fetch).forEach(function (prop) {
        var key = fetch[prop] === true ? prop : fetch[prop];
        storeProps[prop] = store.getIn(key);
      });

      // pass through props
      Object.assign(storeProps, props);

      return _React2['default'].cloneElement(children, storeProps);
    }
  }]);

  return StoreComponent;
})(_React2['default'].Component);

exports['default'] = StoreComponent;
module.exports = exports['default'];
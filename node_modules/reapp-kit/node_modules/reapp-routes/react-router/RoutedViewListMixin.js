'use strict';

var ParentRouteMixin = require('./ParentRouteMixin');

// mixin for viewlists
// works with react-router and gives some helper functions
// to manage viewLists

module.exports = Object.assign({}, ParentRouteMixin, {

  routedViewListProps: function routedViewListProps(props) {
    var _this = this;

    return {
      scrollToStep: this.scrollToStep(),
      onViewEntered: function onViewEntered(i) {
        if (props && props.onViewEntered) props.onViewEntered(i);

        _this._handleViewEntered(i);
      }
    };
  },

  scrollToStep: function scrollToStep() {
    return this.numActiveRoutes() - this.getRouteDepth();
  },

  childRouteHandler: function childRouteHandler(props) {
    return this.createChildRouteHandler(props);
  },

  // todo: debug why this is called more than it should be
  _handleViewEntered: function _handleViewEntered(i) {
    var _this2 = this;

    if (i === 0 && this.numActiveRoutes() > this.getRouteDepth()) {
      var r = this.context.router.getCurrentRoutes().reverse();
      r.shift();
      setTimeout(function () {
        _this2.context.router.transitionTo(r[0].path);
      });
    }
  },

  numActiveRoutes: function numActiveRoutes() {
    return this.context.router.getCurrentRoutes().length;
  },

  hasChildRoute: function hasChildRoute() {
    return this.numActiveRoutes() > this.getRouteDepth();
  },

  subRouteKey: function subRouteKey() {
    return this.context.router.getCurrentRoutes().reverse()[0].name + this.context.router.getCurrentParams().id;
  }
});
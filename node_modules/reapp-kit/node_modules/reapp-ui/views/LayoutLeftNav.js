'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');
var AnimatableContainer = require('../helpers/AnimatableContainer');
var LeftNavBehavior = require('../behaviors/LeftNavBehavior');
var Drawer = require('../components/Drawer');
var DrawerBehavior = require('../behaviors/DrawerBehavior');
var TouchableArea = require('../helpers/TouchableArea');
var StaticContainer = require('../helpers/StaticContainer');
var Scrollable = require('../mixins/Scrollable');
var Tappable = require('../helpers/Tappable');
var clone = require('../lib/niceClone');

module.exports = Component({
  name: 'LayoutLeftNav',

  propTypes: {
    behavior: React.PropTypes.object,
    sideWidth: React.PropTypes.number,
    sizeZIndex: React.PropTypes.number,
    drawerProps: React.PropTypes.object,
    handle: React.PropTypes.node,
    draggable: React.PropTypes.bool
  },

  mixins: [Scrollable],

  scrollerProps: {
    bouncing: false,
    scrollingX: true,
    scrollingY: false,
    snapping: true
  },

  afterMeasureScroll: function afterMeasureScroll(node) {
    this.scroller.setSnapSize(this.props.sideWidth, node.clientHeight);
    this.scroller.scrollTo(this.props.sideWidth, 0);
  },

  getDefaultProps: function getDefaultProps() {
    return {
      sideWidth: 200,
      behavior: LeftNavBehavior.NORMAL
    };
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.sideWidth !== prevProps.sideWidth) this._measureScroll();
  },

  closeSide: function closeSide() {
    if (this.isSideOpen()) this.scroller.scrollTo(this.props.sideWidth, 0, true);
  },

  _handleTap: function _handleTap() {
    var scrollTo = this.isSideOpen() ? this.props.sideWidth : 0;
    this.scroller.scrollTo(scrollTo, 0, true);
  },

  _handleContentTouchTap: function _handleContentTouchTap(e) {
    if (!this.isSideOpen()) {
      return;
    }this.scroller.scrollTo(this.props.sideWidth, 0, true);
    e.preventDefault();
  },

  isSideOpen: function isSideOpen() {
    return this.state.scrollX !== this.props.sideWidth;
  },

  _isAnimating: function _isAnimating() {
    return this.state.scrollX > 0 && this.state.scrollX < this.props.sideWidth;
  },

  render: function render() {
    var _props = this.props;
    var behavior = _props.behavior;
    var sideWidth = _props.sideWidth;
    var sideZIndex = _props.sideZIndex;
    var handle = _props.handle;
    var side = _props.side;
    var children = _props.children;
    var drawerProps = _props.drawerProps;
    var draggable = _props.draggable;

    var props = _objectWithoutProperties(_props, ['behavior', 'sideWidth', 'sideZIndex', 'handle', 'side', 'children', 'drawerProps', 'draggable']);

    var isSideOpen = this.isSideOpen();

    this.addStyles('side', isSideOpen && {
      left: sideWidth * -1,
      width: sideWidth,
      zIndex: sideZIndex || 0
    });

    var sideProps = {
      translate: behavior.parent.translate(sideWidth, this.state.scrollX),
      rotate: behavior.parent.rotate(sideWidth, this.state.scrollX),
      opacity: behavior.parent.opacity(sideWidth, this.state.scrollX),
      styles: isSideOpen ? { self: this.getStyles('side') } : null
    };

    var drawerProps = Object.assign({
      layer: 1,
      translate: DrawerBehavior.left.translate(this.state.scrollX),
      scroller: this.scroller,
      onTouchTap: this._handleContentTouchTap
    }, drawerProps);

    var movableHandle = clone(handle, {
      onTap: this._handleTap,
      isInTitleBar: true
    }, true);

    if (draggable) movableHandle = React.createElement(
      TouchableArea,
      { scroller: this.scroller, passprops: true },
      movableHandle
    );

    var childrenWithProps = clone(children, { handle: movableHandle });

    return React.createElement(
      'div',
      _extends({}, this.componentProps(), props),
      isSideOpen && React.createElement(
        AnimatableContainer,
        sideProps,
        React.createElement(
          Tappable,
          _extends({}, this.componentProps('sideInner'), {
            onTap: this._handleContentTouchTap }),
          side
        )
      ),
      React.createElement(
        Drawer,
        _extends({}, this.componentProps('drawer'), {
          update: this.state.scrollX === 200,
          from: 'right',
          dragger: draggable
        }, drawerProps),
        childrenWithProps
      )
    );
  }
});
'use strict';

var _require = require('../../lib/AnimationHelpers');

var symmetrical = _require.symmetrical;
var decreaseOnExit = _require.decreaseOnExit;
var increaseOnEnter = _require.increaseOnEnter;
var decreaseOnEnter = _require.decreaseOnEnter;
var scaleBetween = _require.scaleBetween;

module.exports = {
  viewParallax: function viewParallax(_ref) {
    var index = _ref.index;
    var step = _ref.step;
    var width = _ref.width;

    var translateX = (index - step) * width;

    if (index < step) translateX = translateX / 2;

    return {
      translate: { x: translateX }
    };
  },

  viewDrawer: function viewDrawer(_ref2) {
    var index = _ref2.index;
    var step = _ref2.step;
    var height = _ref2.height;

    var translate;
    var strength = index - step;

    // animating out
    if (index < step) {
      return {
        scale: scaleBetween(decreaseOnExit(index, step), 2, 0, 1.1, 0.9)
      };
    } else {
      return {
        translate: { y: strength * height + (index > 0 ? 44 : 0) }
      };
    }
  },

  viewSideBySide: function viewSideBySide(_ref3) {
    var index = _ref3.index;
    var step = _ref3.step;
    var width = _ref3.width;

    return {
      translate: { x: (index - step) * width }
    };
  },

  titleBarIOS: function titleBarIOS(_ref4) {
    var index = _ref4.index;
    var step = _ref4.step;
    var width = _ref4.width;
    return {
      translate: { x: -(step - index) * (width / 2.5) },
      opacity: symmetrical(index, step, 'easeInCubic')
    };
  },

  down: function down(_ref5) {
    var index = _ref5.index;
    var step = _ref5.step;
    return {
      opacity: symmetrical(index, step),
      height: symmetrical(index, step) * 100 + '%'
    };
  },

  iconTitleBar: function iconTitleBar(_ref6) {
    var index = _ref6.index;
    var step = _ref6.step;
    var width = _ref6.width;

    return {
      translate: { x: (step - index) * (width / 2.5) }
    };
  },

  moveToLeft: function moveToLeft(_ref7) {
    var index = _ref7.index;
    var step = _ref7.step;
    var width = _ref7.width;
    return {
      translate: { x: -(step - index) * width }
    };
  },

  moveUp: function moveUp(_ref8) {
    var index = _ref8.index;
    var step = _ref8.step;
    var height = _ref8.height;
    return {
      translate: { y: -(step - index) * height }
    };
  },

  card: function card(_ref9) {
    var index = _ref9.index;
    var step = _ref9.step;
    return {
      translate: { y: step * index + symmetrical(step) * 10 }
    };
  },

  fade: function fade(_ref10) {
    var index = _ref10.index;
    var step = _ref10.step;
    return {
      opacity: symmetrical(index, step)
    };
  },

  fadeOnEnter: function fadeOnEnter(_ref11) {
    var index = _ref11.index;
    var step = _ref11.step;
    return {
      opacity: symmetrical(index, step) / 2
    };
  },

  nestedViewOverlay: function nestedViewOverlay(_ref12) {
    var index = _ref12.index;
    var step = _ref12.step;
    return {
      opacity: symmetrical(index, step) / 4
    };
  },

  scaleDown: function scaleDown(_ref13) {
    var index = _ref13.index;
    var step = _ref13.step;
    return {
      scale: scaleBetween(decreaseOnExit(index, step), 2, 0, 1.2, 0.8)
    };
  },

  rotate: function rotate(_ref14) {
    var index = _ref14.index;
    var step = _ref14.step;
    return {
      rotate: step * 360
    };
  }
};
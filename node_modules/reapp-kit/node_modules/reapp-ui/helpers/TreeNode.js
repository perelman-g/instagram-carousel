'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');

// Build a tree from structured objects
// Wraps each node with a component

var TreeNode = React.createClass({
  displayName: 'TreeNode',

  propTypes: {
    cursor: React.PropTypes.object.isRequired,
    childKey: React.PropTypes.string.isRequired,
    Component: React.PropTypes.func.isRequired,
    idKey: React.PropTypes.string,
    level: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      idKey: 'id',
      childKey: 'kids'
    };
  },

  render: function render() {
    var _props = this.props;
    var idKey = _props.idKey;
    var level = _props.level;
    var cursor = _props.cursor;
    var childKey = _props.childKey;
    var Component = _props.Component;

    var props = _objectWithoutProperties(_props, ['idKey', 'level', 'cursor', 'childKey', 'Component']);

    if (!cursor || !cursor.get) {
      return null;
    }level = level || 0;
    var children = cursor.get(childKey);
    var childNodes;

    if (children) {
      var i = 0;
      level++;

      childNodes = children.map(function (child) {
        return React.createElement(TreeNode, {
          key: 'treenode-' + level + '-' + ++i,
          Component: Component,
          childKey: childKey,
          cursor: child,
          level: level });
      });
    }

    return React.createElement(
      Component,
      _extends({}, props, {
        key: cursor.get(idKey),
        level: level,
        cursor: cursor }),
      childNodes
    );
  }
});

module.exports = TreeNode;
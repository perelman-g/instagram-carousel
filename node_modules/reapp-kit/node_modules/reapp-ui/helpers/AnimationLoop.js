'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Component = require('../component');
var Animate = require('react-animate-state');
var clone = require('../lib/niceClone');
var UI = require('../index');

// Animate your components in repeating loops,
// you pass in an 'animation' name, and then just set active={true}
// and it will loop for 'duration'

module.exports = Component({
  name: 'AnimationLoop',

  propTypes: {
    animation: React.PropTypes.string.isRequired,
    duration: React.PropTypes.number,
    easing: React.PropTypes.string,
    active: React.PropTypes.bool,
    blockOnAnimation: React.PropTypes.string
  },

  mixins: [Animate],

  getDefaultProps: function getDefaultProps() {
    return {
      duration: 1000,
      easing: 'linear'
    };
  },

  getInitialState: function getInitialState() {
    return {
      step: 0,
      index: 1
    };
  },

  componentWillMount: function componentWillMount() {
    this.start(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.start(nextProps);
  },

  componentWillUpdate: function componentWillUpdate() {
    if (this.props.blockOnAnimation) {
      if (this.isAnimating(this.props.blockOnAnimation)) this.disableAnimation();else this.enableAnimation();
    }
  },

  start: function start(props) {
    if (props.active && !this.state.isActive) {
      this.setState({
        step: 0,
        isActive: true,
        animations: {
          self: this.props.animation
        }
      });
      this.run();
    }
  },

  run: function run() {
    var _this = this;

    this.animate({ step: 1 }, this.props.easing, this.props.duration, function () {
      _this.setState({ step: 0 });

      if (_this.props.active) _this.run();else _this.setState({ isActive: false });
    });
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var animations = _props.animations;
    var active = _props.active;
    var duration = _props.duration;

    var props = _objectWithoutProperties(_props, ['children', 'animations', 'active', 'duration']);

    return React.createElement(
      'div',
      _extends({}, this.componentProps(), props),
      clone(children, props, true)
    );
  }
});
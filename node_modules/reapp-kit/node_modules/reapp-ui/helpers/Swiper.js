'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');

var _require = require('reapp-scroller');

var Scroller = _require.Scroller;

var TouchableArea = require('../helpers/TouchableArea');
var clone = require('../lib/niceClone');
var StyleKeys = require('../lib/StyleKeys');

module.exports = Component({
  name: 'Swiper',

  scrollerProps: function scrollerProps() {
    return Object.assign({
      bouncing: true,
      snapping: true,
      locking: true,
      paging: false,
      scrollingY: this.props.up || this.props.down || false,
      scrollingX: this.props.left || this.props.right || false
    }, this.props.scrollerProps);
  },

  propTypes: {
    up: React.PropTypes.bool,
    down: React.PropTypes.bool,
    left: React.PropTypes.bool,
    right: React.PropTypes.bool,

    // pass props to the scroller
    scrollerProps: React.PropTypes.object,

    // what to show above
    children: React.PropTypes.node,

    // what to show below
    below: React.PropTypes.node,

    // where to limit swiping
    limit: React.PropTypes.number,

    // disable swiping (swiper no swiping!)
    noswiping: React.PropTypes.bool
  },

  componentWillMount: function componentWillMount() {
    this.scroller = this.props.scroller || new Scroller(this.handleScroll, this.scrollerProps());
  },

  componentDidMount: function componentDidMount() {
    this.above = this.refs.above.getDOMNode();

    var _props = this.props;
    var width = _props.width;
    var height = _props.height;
    var limit = _props.limit;
    var up = _props.up;
    var down = _props.down;
    var left = _props.left;
    var right = _props.right;

    var vertical = up || down;
    var horizontal = left || right;

    var aboveNode = this.refs.above.getDOMNode().children[0];
    width = width || aboveNode.clientWidth;
    height = height || aboveNode.clientHeight;

    if (!limit) {
      var belowNode = this.refs.below.getDOMNode().children[0];
      limit = belowNode[vertical ? 'clientHeight' : 'clientWidth'];
    }

    this.scroller.setSnapSize(limit, limit);

    this.scroller.setDimensions(width, height, width + (horizontal ? limit : 0), height + (vertical ? limit : 0));
  },

  componentWillReceiveProps: function componentWillReceiveProps() {
    this.above = this.refs.above.getDOMNode();
  },

  handleScroll: function handleScroll(x, y) {
    var updateState = false;

    if (this.props.noswiping) {
      return;
    } // TODO: handle other sides
    if (!this.props.left) x = Math.max(0, x);

    this.above.style[StyleKeys.TRANSFORM] = 'translate3d(' + -x + 'px,0,0)';
  },

  render: function render() {
    var _props2 = this.props;
    var up = _props2.up;
    var down = _props2.down;
    var left = _props2.left;
    var right = _props2.right;
    var children = _props2.children;
    var below = _props2.below;
    var noswiping = _props2.noswiping;

    var props = _objectWithoutProperties(_props2, ['up', 'down', 'left', 'right', 'children', 'below', 'noswiping']);

    if (up) this.addStyles('below', 'up');

    if (right) this.addStyles('below', 'right');

    if (down) this.addStyles('below', 'down');

    if (left) this.addStyles('below', 'left');

    var touchableProps = {
      ignoreX: !left && !right,
      ignoreY: !up && !down
    };

    return React.createElement(
      TouchableArea,
      _extends({}, props, touchableProps, this.componentProps(), { scroller: this.scroller }),
      React.createElement(
        'div',
        this.componentProps('above'),
        clone(children, props, true)
      ),
      React.createElement(
        'div',
        this.componentProps('below'),
        below
      )
    );
  }
});
'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var React = require('react');
var Component = require('../component');
var Tappable = require('../mixins/Tappable');
var clone = require('../lib/niceClone');

module.exports = Component({
  name: 'Tappable',

  mixins: [Tappable],

  getDefaultProps: function getDefaultProps() {
    return {
      element: 'div'
    };
  },

  render: function render() {
    var _props = this.props;
    var element = _props.element;
    var children = _props.children;
    var tapFocusStyle = _props.tapFocusStyle;
    var passprops = _props.passprops;
    var delayUntilActive = _props.delayUntilActive;
    var moveThreshold = _props.moveThreshold;
    var pressDelay = _props.pressDelay;
    var pressMoveThreshold = _props.pressMoveThreshold;

    var props = _objectWithoutProperties(_props, ['element', 'children', 'tapFocusStyle', 'passprops', 'delayUntilActive', 'moveThreshold', 'pressDelay', 'pressMoveThreshold']);

    var tapProps = this.tappableProps();
    this.addClass(tapProps.className);

    if (this.state.tapActive && tapFocusStyle) this.addStyles(tapFocusStyle);

    // pass props to children
    if (passprops) children = clone(children, props, true);

    return React.createElement(element, Object.assign({}, tapProps, this.componentProps(), props), children);
  }
});
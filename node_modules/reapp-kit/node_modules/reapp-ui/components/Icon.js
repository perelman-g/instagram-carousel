'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Component = require('../component');
var StaticContainer = require('../helpers/StaticContainer');
var SVG = require('./SVG');

module.exports = Component({
  name: 'Icon',

  propTypes: {
    // width x height in pixels
    size: React.PropTypes.number,

    // an SVG file
    file: React.PropTypes.string,

    // props passed to svg
    stroke: React.PropTypes.number,
    shapeRendering: React.PropTypes.string,
    viewBox: React.PropTypes.string,
    crisp: React.PropTypes.bool,

    // internal props used for special styles
    isInTitleBar: React.PropTypes.bool,
    isInViewList: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      size: 32,
      stroke: 1,
      viewBox: '0 0 64 64',
      conditionalAnimations: {
        isInViewList: {
          self: 'iconTitleBar'
        }
      }
    };
  },

  render: function render() {
    var _props = this.props;
    var isInTitleBar = _props.isInTitleBar;
    var isInViewList = _props.isInViewList;

    var props = _objectWithoutProperties(_props, ['isInTitleBar', 'isInViewList']);

    var shouldUpdate = isInViewList ? !this.isAnimating('viewList') : true;

    this.addStyles({
      width: this.props.size,
      height: this.props.size
    });

    var color = this.props.color || this.getConstant(isInTitleBar ? 'iconColorTitleBar' : 'iconColor');

    if (isInTitleBar) this.addStyles('isInTitleBar');

    return React.createElement(
      'div',
      this.componentProps(),
      React.createElement(
        StaticContainer,
        { update: shouldUpdate },
        React.createElement(SVG, _extends({}, props, { color: color }))
      )
    );
  }

});
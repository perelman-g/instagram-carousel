'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Component = require('../component');
var Icon = require('./Icon');
var Tappable = require('../mixins/Tappable');

module.exports = Component({
  name: 'BarItem',

  mixins: [Tappable],

  propTypes: {
    icon: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
    iconProps: React.PropTypes.object,
    children: React.PropTypes.node,
    display: React.PropTypes.oneOf(['text', 'icon', 'icon-text', 'icon-text-right']),
    active: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      display: 'icon-text'
    };
  },

  makeSection: function makeSection(name, content) {
    return content && React.createElement(
      'div',
      this.componentProps('display:' + this.props.display + '__' + name),
      content
    );
  },

  render: function render() {
    var _props = this.props;
    var icon = _props.icon;
    var children = _props.children;
    var display = _props.display;
    var iconProps = _props.iconProps;
    var active = _props.active;

    var props = _objectWithoutProperties(_props, ['icon', 'children', 'display', 'iconProps', 'active']);

    this.addStyles(display);

    if (active) this.addStyles('active');

    if (typeof icon === 'string') icon = React.createElement(Icon, _extends({
      color: this.getConstant(active ? 'barColorActive' : 'barColor'),
      size: display === 'icon-text-right' ? 24 : 32,
      file: icon,
      styles: this.getStyles('icon'),
      svgProps: { style: { margin: 'auto' } }
    }, iconProps));

    return React.createElement(
      'div',
      _extends({}, this.tappableProps(), this.componentProps(), props),
      display != 'text' && this.makeSection('icon', icon),
      display != 'icon' && this.makeSection('text', children)
    );
  }
});
'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');
var Block = require('./Block');
var clone = require('../lib/niceClone');

module.exports = Component({
  name: 'Container',

  propTypes: {
    pad: React.PropTypes.bool,
    col: React.PropTypes.bool,

    // wrap in Block automatically
    wrap: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      pad: false,
      wrap: false
    };
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var pad = _props.pad;
    var col = _props.col;
    var wrap = _props.wrap;

    var props = _objectWithoutProperties(_props, ['children', 'pad', 'col', 'wrap']);

    if (col) this.addStyles('col');

    return React.createElement(
      'div',
      _extends({}, this.componentProps(), props),
      React.Children.map(children, function (child, index) {
        var childProps = {
          pad: pad, index: index,
          key: index,
          total: children.length
        };

        return wrap ? React.createElement(
          Block,
          childProps,
          child
        ) : clone(child, childProps);
      })
    );
  }
});
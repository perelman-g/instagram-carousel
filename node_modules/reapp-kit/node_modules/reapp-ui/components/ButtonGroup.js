'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');
var clone = require('../lib/niceClone');

module.exports = Component({
  name: 'ButtonGroup',

  propTypes: {
    children: React.PropTypes.node,
    buttonProps: React.PropTypes.object
  },

  // for handling styles of buttons at begin/end
  getStyleForButtonAtIndex: function getStyleForButtonAtIndex(i, total) {
    var widthStyle = this.getWidthStyle(total);
    var positionStyle;

    // first button
    if (i === 0) positionStyle = this.styles.buttonFirst;
    // first button, two total buttons
    else if (i === 0 && total === 2) positionStyle = this.styles.buttonFirstTwoTotal;
    // last button
    else if (i === total - 1 && total >= 2) positionStyle = this.styles.buttonLast;
    // middle button
    else positionStyle = this.styles.buttonMiddle;

    return {
      self: [positionStyle].concat(widthStyle)
    };
  },

  getWidthStyle: function getWidthStyle(total) {
    var width = 100 / total + '%';

    return {
      flexBasis: width,
      maxWidth: width
    };
  },

  render: function render() {
    var _this = this;

    var _props = this.props;
    var children = _props.children;
    var buttonProps = _props.buttonProps;

    var props = _objectWithoutProperties(_props, ['children', 'buttonProps']);

    var total = children && children.length || 0;

    return React.createElement(
      'div',
      _extends({}, this.componentProps(), props),
      clone(children, function (child, i) {
        var styles = _this.getStyleForButtonAtIndex(i, total);

        if (!buttonProps) return { styles: styles };

        if (buttonProps.styles) styles = _this.mergeStylesProps(styles, buttonProps.styles);

        return Object.assign({}, buttonProps, { styles: styles });
      }, true)
    );
  }
});

// get extra styles for index
// if no extra props, return styles
// if props styles and extra styles, merge them
// merge extra props and extra styles
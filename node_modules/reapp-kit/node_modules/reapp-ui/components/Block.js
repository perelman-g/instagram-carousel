'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');

module.exports = Component({
  name: 'Block',

  propTypes: {
    width: React.PropTypes.number,
    pad: React.PropTypes.bool,
    row: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return { pad: false };
  },

  getWidthStyle: function getWidthStyle(width) {
    var styles;

    if (typeof width === 'number') styles = { flex: width };else if (width) styles = { flexBasis: width, maxWidth: width };else styles = { flex: 1 };

    return styles;
  },

  render: function render() {
    var _props = this.props;
    var width = _props.width;
    var pad = _props.pad;
    var row = _props.row;
    var children = _props.children;

    var props = _objectWithoutProperties(_props, ['width', 'pad', 'row', 'children']);

    if (pad) this.addStyles('pad');

    if (row) this.addStyles('row');

    this.addStyles(this.getWidthStyle(width));

    return React.createElement(
      'div',
      _extends({}, this.componentProps(), props),
      children
    );
  }
});
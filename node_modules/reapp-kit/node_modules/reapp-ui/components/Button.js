'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');
var Icon = require('./Icon');
var clone = require('../lib/niceClone');
var Tappable = require('../mixins/Tappable');
var ButtonGroup = require('./ButtonGroup');

var shallowEqual = require('react/lib/shallowEqual');

var Button = Component({
  name: 'Button',

  statics: {
    liNoPad: true
  },

  mixins: [Tappable],

  shouldComponentUpdate: function shouldComponentUpdate() {
    return !this.props.isInViewList || this.context.animations.viewList.stepper.value % 1 === 0;
  },

  propTypes: {
    // pass properties to Icon
    iconProps: React.PropTypes.object,

    // SVG icon
    icon: React.PropTypes.element,

    // no visual chrome added
    chromeless: React.PropTypes.bool,

    // Extend to fit screen when inside View
    fullscreen: React.PropTypes.bool,

    // Fully rounded corners
    rounded: React.PropTypes.bool,

    // Filled type button (no borders)
    filled: React.PropTypes.bool,

    // Color of button
    color: React.PropTypes.string,

    // Text color
    textColor: React.PropTypes.string,

    // Disabled look / no tap
    inactive: React.PropTypes.bool,

    // Props used for special display
    isInTitleBar: React.PropTypes.bool,
    isInViewList: React.PropTypes.bool },

  render: function render() {
    var tapActive = this.state.tapActive;
    var _props = this.props;
    var iconProps = _props.iconProps;
    var color = _props.color;
    var textColor = _props.textColor;
    var icon = _props.icon;
    var children = _props.children;
    var fullscreen = _props.fullscreen;
    var chromeless = _props.chromeless;
    var rounded = _props.rounded;
    var filled = _props.filled;
    var inactive = _props.inactive;
    var isInTitleBar = _props.isInTitleBar;
    var isInViewList = _props.isInViewList;
    var animationSource = _props.animationSource;

    var props = _objectWithoutProperties(_props, ['iconProps', 'color', 'textColor', 'icon', 'children', 'fullscreen', 'chromeless', 'rounded', 'filled', 'inactive', 'isInTitleBar', 'isInViewList', 'animationSource']);

    var cloneProps = Object.assign({}, iconProps || {}, {
      isInTitleBar: isInTitleBar,
      isInViewList: isInViewList,
      animationSource: animationSource || isInTitleBar && 'viewList',
      tapActive: tapActive
    });

    if (color) this.addStyles({
      borderColor: color,
      background: color,
      color: '#fff'
    });

    if (textColor) this.addStyles({
      color: textColor
    });

    if (icon) icon = clone(icon, cloneProps, true);

    if (isInTitleBar) this.addStyles('isInTitleBar');

    if (chromeless) this.addStyles('chromeless');

    if (fullscreen) this.addStyles('fullscreen');

    if (rounded) this.addStyles('rounded');

    if (filled) this.addStyles('filled');

    if (inactive) this.addStyles('inactive');

    if (tapActive) if (filled) this.addStyles('tapActiveFilled');else this.addStyles(isInTitleBar ? 'tapActiveTitleBar' : 'tapActive');

    var tapProps;
    if (this.props.onTap) {
      tapProps = this.tappableProps();
      this.addClass(tapProps.className);
    }

    return React.createElement(
      'div',
      _extends({}, tapProps, this.componentProps(), props),
      icon || !!iconProps && React.createElement(Icon, cloneProps),
      React.createElement(
        'div',
        this.componentProps('inner'),
        children
      )
    );
  }
});

Button.Group = ButtonGroup;

module.exports = Button;
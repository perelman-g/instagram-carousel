'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');
var Icon = require('./Icon');
var Tappable = require('../mixins/Tappable');
var clone = require('../lib/niceClone');

module.exports = Component({
  name: 'ChatItem',

  mixins: [React.addons.PureRenderMixin, Tappable],

  propTypes: {
    // Text name for chat bubble
    name: React.PropTypes.string,

    // Date on chat bubble
    date: React.PropTypes.string,

    // Image for chat bubble
    image: React.PropTypes.node,

    // Belongs to user (shown on right side)
    own: React.PropTypes.bool,

    // No decoration on chat bubble
    plain: React.PropTypes.bool
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var name = _props.name;
    var date = _props.date;
    var image = _props.image;
    var own = _props.own;
    var plain = _props.plain;

    var props = _objectWithoutProperties(_props, ['children', 'name', 'date', 'image', 'own', 'plain']);

    if (own) {
      this.addStyles('own');
      this.addStyles('arrow', 'arrowOwn');
      this.addClass('own');
    } else {
      this.addClass('them');
    }

    var tapProps;
    if (this.props.onTap) {
      tapProps = this.tappableProps();
      this.addClass(tapProps.className);
    }

    return React.createElement(
      'div',
      _extends({}, tapProps, props, this.componentProps()),
      React.createElement(
        'p',
        this.componentProps('inner'),
        children
      ),
      !plain && React.createElement('div', this.componentProps('arrow'))
    );
  }
});
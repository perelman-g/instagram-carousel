'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Animate = require('react-animate-state');
var Tappable = require('../helpers/Tappable');
var Component = require('../component');
var ModalButton = require('./ModalButton');
var ButtonGroup = require('./ButtonGroup');
var clone = require('../lib/niceClone');

module.exports = Component({
  name: 'ModalPortal',

  mixins: [Animate],

  getInitialState: function getInitialState() {
    return {
      step: 0,
      index: 1,
      isClosing: false
    };
  },

  componentDidMount: function componentDidMount() {
    this.animate({ step: 1 }, this.props.animationDuration);
  },

  handleCancel: function handleCancel() {
    if (this.props.onCancel) this.props.onCancel();

    this.handleClose();
  },

  handleConfirm: function handleConfirm(e) {
    if (this.props.onConfirm) this.props.onConfirm();

    this.handleClose(e);
  },

  handleClose: function handleClose(e) {
    this.afterClose(e);
    // todo: this broke with portals
    // if (!this.state.isClosing) {
    //   this.setState({ isClosing: true });
    //   this.tweenState('step', {
    //     endValue: 2,
    //     duration: this.props.animationDuration,
    //     onEnd: this.afterClose.bind(this, e)
    //   });
    // }
  },

  afterClose: function afterClose(e) {
    var _this = this;

    setTimeout(function () {
      if (_this.props.onClose) _this.props.onClose(e);
    });
  },

  render: function render() {
    var _props = this.props;
    var modalProps = _props.modalProps;
    var title = _props.title;
    var type = _props.type;
    var children = _props.children;
    var open = _props.open;

    var props = _objectWithoutProperties(_props, ['modalProps', 'title', 'type', 'children', 'open']);

    if (open) {
      this.addClass('open');
      this.addStyles('open');
    }

    if (modalProps) this.addStyles('modal', modalProps.styles);

    var buttons;
    switch (type) {
      case 'alert':
        buttons = [React.createElement(
          ModalButton,
          { confirm: true, onTap: this.handleConfirm, stopPropagation: true },
          'OK'
        )];
        break;
      case 'confirm':
        buttons = [React.createElement(
          ModalButton,
          { styles: { self: { borderLeft: 'none' } }, onTap: this.handleCancel, stopPropagation: true },
          'Cancel'
        ), React.createElement(
          ModalButton,
          { confirm: true, onTap: this.handleConfirm, stopPropagation: true },
          'OK'
        )];
        break;
    }

    var buttonWidth = 100 / buttons.length + '%';
    var style = {
      flexBasis: buttonWidth,
      WebkitFlexBasis: buttonWidth,
      maxWidth: buttonWidth
    };

    return React.createElement(
      'div',
      _extends({}, this.componentProps(), props),
      React.createElement(Tappable, _extends({}, this.componentProps('bg'), {
        onTap: this.handleClose,
        stopPropagation: true
      })),
      React.createElement(
        'div',
        this.componentProps('modal'),
        React.createElement(
          'div',
          this.componentProps('inner'),
          title && React.createElement(
            'div',
            this.componentProps('title'),
            title
          ),
          React.createElement(
            'div',
            this.componentProps('text'),
            children
          )
        ),
        React.createElement(
          'div',
          this.componentProps('buttons'),
          clone(buttons, function (props, index) {
            return { index: index, style: style };
          }, true)
        )
      )
    );
  }
});
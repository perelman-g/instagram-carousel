'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');
var Icon = require('./Icon');
var Tappable = require('../mixins/Tappable');
var clone = require('../lib/niceClone');
var linkedIcon = require('../assets/icons/right.svg');

module.exports = Component({
  name: 'ListItem',

  mixins: [React.addons.PureRenderMixin, Tappable],

  propTypes: {
    // displayed in bold at the top
    title: React.PropTypes.node,

    // aligns to the right of title, for badges, time, etc
    titleAfter: React.PropTypes.node,

    // lighter sub title
    titleSub: React.PropTypes.node,

    // place an icon or element before the item
    before: React.PropTypes.node,

    // place an icon or element after the item
    after: React.PropTypes.node,

    // wrap an element around the item, good for links
    wrapper: React.PropTypes.node,

    // show an icon indicating it's linked
    icon: React.PropTypes.bool,

    // don't add padding
    nopad: React.PropTypes.bool
  },

  makeSection: function makeSection(name, content, props) {
    return content && React.createElement(
      'div',
      _extends({}, props, this.componentProps(name), {
        key: '' + name + '-' + this.props.key }),
      content
    );
  },

  isLink: function isLink(el) {
    return el.type === 'a' || el.type.displayName === 'Link';
  },

  hasLinkAsChild: function hasLinkAsChild(child) {
    return React.isValidElement(child) && this.isLink(child);
  },

  getIcon: function getIcon() {
    return React.createElement(Icon, {
      file: linkedIcon,
      styles: this.getStyles('arrow'),
      size: 12,
      stroke: 3,
      color: this.getConstant('listItemArrowColor')
    });
  },

  render: function render() {
    var _props = this.props;
    var children = _props.children;
    var title = _props.title;
    var titleAfter = _props.titleAfter;
    var titleSub = _props.titleSub;
    var before = _props.before;
    var after = _props.after;
    var wrapper = _props.wrapper;
    var icon = _props.icon;
    var nopad = _props.nopad;
    var index = _props.index;
    var fulltext = _props.fulltext;

    var props = _objectWithoutProperties(_props, ['children', 'title', 'titleAfter', 'titleSub', 'before', 'after', 'wrapper', 'icon', 'nopad', 'index', 'fulltext']);

    if (index === 0) {
      this.addStyles('content', 'borderless');
      this.addStyles('after', 'borderless');
    }

    if (fulltext) this.addStyles('children', 'fulltext');

    // make a top level link into a wrapper so it can take up the whole item
    if (!wrapper && this.hasLinkAsChild(children)) {
      wrapper = children;
      children = wrapper.props.children;
    }

    if (!this.getStyleVal('children', 'color')) this.addStyles('children', {
      color: this.getConstant(title ? 'listItemChildrenColor' : 'listItemColor')
    });

    if (wrapper) {
      var hasLinkIcon = this.isLink(wrapper) || icon;

      wrapper = clone(wrapper, {
        children: hasLinkIcon ? this.getIcon() : null,
        style: this.getStyles('wrapper')[0]
      });

      // pad out right side if it has a wrapper
      if (hasLinkIcon) this.addStyles({ paddingRight: 20 });
    } else if (icon) {
      wrapper = this.getIcon();
    }

    var hasTitle = title || titleAfter;

    if (!hasTitle) this.addStyles('children', 'childrenNoTitle');

    if (nopad || children && children.type && children.type.liNoPad) this.addStyles('content', 'contentNoPad');

    var section = this.makeSection;
    var content = [section('wrapper', wrapper), section('before', before), section('content', [hasTitle && section('titleTop', [section('title', title), section('titleAfter', titleAfter)]), section('titleSub', titleSub), section('children', children)]), section('after', after)];

    var tapProps;
    if (this.props.onTap) tapProps = this.tappableProps();

    if (this.state.tapActive) this.addStyles('tapActive');

    return React.createElement(
      'div',
      _extends({}, tapProps, props, this.componentProps()),
      content
    );
  }
});
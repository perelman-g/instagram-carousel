'use strict';

var _objectWithoutProperties = function (obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react/addons');
var Component = require('../component');
var MultiTappable = require('../mixins/MultiTappable');
var clone = require('../lib/niceClone');

module.exports = Component({
  name: 'TitleBar',

  propTypes: {
    width: React.PropTypes.number,
    height: React.PropTypes.number,
    left: React.PropTypes.node,
    right: React.PropTypes.node,
    transparent: React.PropTypes.bool,

    isInViewList: React.PropTypes.bool,

    // attach to side of screen
    attach: React.PropTypes.string
  },

  mixins: [MultiTappable],

  getDefaultProps: function getDefaultProps() {
    return {
      width: window.innerWidth,
      animationSource: 'viewList'
    };
  },

  componentDidMount: function componentDidMount() {
    this.centerMiddleTitle();
  },

  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (prevProps.title !== this.props.title) this.centerMiddleTitle();
  },

  centerMiddleTitle: function centerMiddleTitle() {
    if (this.refs.mid) {
      var mid = this.refs.mid.getDOMNode();
      var midLeft = undefined;

      if (!this.props.midWidth) {
        var midCenter = mid.offsetLeft + mid.clientWidth / 2;
        var winCenter = this.props.width / 2;
        midLeft = winCenter - midCenter;
      } else {
        midLeft = this.props.width / 2 - this.props.midWidth / 2;
      }

      mid.style.left = '' + midLeft + 'px';
    }
  },

  addTitleBarProps: function addTitleBarProps(component) {
    if (!component || !React.isValidElement(component)) {
      return component;
    }return clone(component, {
      isInTitleBar: true,
      isInViewList: this.props.isInViewList,
      animationState: this.props.animationState
    });
  },

  handleDoubleTap: function handleDoubleTap() {
    if (this.props.onDoubleTap) this.props.onDoubleTap();
  },

  render: function render() {
    var _props = this.props;
    var left = _props.left;
    var right = _props.right;
    var children = _props.children;
    var height = _props.height;
    var transparent = _props.transparent;
    var attach = _props.attach;

    var props = _objectWithoutProperties(_props, ['left', 'right', 'children', 'height', 'transparent', 'attach']);

    var l, m, r;

    // allow shorthand array entry
    if (!left && !right && Array.isArray(children)) {
      l = children[0];
      m = children[1];
      r = children[2];
    } else {
      l = left;
      m = children;
      r = right;
    }

    var statusBarHeight = this.getConstant('statusBarHeight');
    if (statusBarHeight) this.addStyles({
      height: height + statusBarHeight,
      paddingTop: statusBarHeight
    });else if (height) this.addStyles({ height: height });

    if (transparent) this.addStyles('transparent');

    if (attach) this.addStyles('attach-' + attach);

    return React.createElement(
      'div',
      _extends({}, this.componentProps(), this.multiTap(2, this.handleDoubleTap), props),
      l && React.createElement(
        'div',
        this.componentProps('left'),
        this.addTitleBarProps(l)
      ),
      React.createElement(
        'div',
        this.componentProps('mid'),
        m
      ),
      r && React.createElement(
        'div',
        this.componentProps('right'),
        this.addTitleBarProps(r)
      )
    );
  }
});